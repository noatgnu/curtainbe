"""
Django settings for curtainbe project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-b1h!t91!w^5#4k8k4a8%*&kk8%s#5kxc)t=d7=hwnv1cqwg0se'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',
    'channels',
    'curtain.apps.CurtainConfig',
    'corsheaders',
    'rest_framework',
    'rest_framework_api_key',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework.authtoken',
    'django_filters',
    'dbbackup',
    'storages',
    'request',
    'django_rq',
    'django_extensions'
]

MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'request.middleware.RequestMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'curtainbe.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'curtainbe.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'curtain.authentication.APIKeyAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,
}



# Django CORS Headers
CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [
    "http://localhost:4200",
]
CORS_EXPOSED_HEADERS = [
    "Set-Cookie"
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "withCredentials",
    "HTTP_X_API_KEY"
]


# Django request logging
REQUEST_IGNORE_PATHS = [
    "/admin",
    "/static",
    "/logout",
    r'^stats/download/',
]

# Staff settings
CURTAIN_ALLOW_NON_STAFF_DELETE = False
CURTAIN_ALLOW_NON_USER_POST = False
CURTAIN_DEFAULT_USER_LINK_LIMIT = 0
CURTAIN_DEFAULT_USER_CAN_POST = True

# API Key settings
API_KEY_CUSTOM_HEADER = "HTTP_X_API_KEY"


# Storage settings
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
        "LOCATION": BASE_DIR / "media"
    },
}


REDIS_HOST = os.environ.get("REDIS_HOST", "redis")
REDIS_PORT = os.environ.get("REDIS_PORT", "6379")
REDIS_DB = os.environ.get("REDIS_DB", "0")
REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD", "")
REDIS_URL = f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"

REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"] = (
            "rest_framework.renderers.JSONRenderer",
        )

# Django Channels
ASGI_APPLICATION = 'curtainbe.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
            "symmetric_encryption_keys": [SECRET_KEY]
        },
    },
}
ORCID = {
    'client_id': os.environ.get('ORCID_OAUTH_CLIENT_ID', 'resorc'),
    'secret': os.environ.get('ORCID_OAUTH_SECRET', 'resorc'),
}

RQ_QUEUES = {
    'default': {
        'HOST': REDIS_HOST,
        'PORT': REDIS_PORT,
        'DB': REDIS_DB,
        'PASSWORD': REDIS_PASSWORD,
        'DEFAULT_TIMEOUT': 1440,
    },
}

DATACITE_USERNAME = os.environ.get("DATACITE_USERNAME")
DATACITE_PASSWORD = os.environ.get("DATACITE_PASSWORD")
DATACITE_PREFIX = os.environ.get("DATACITE_PREFIX")
DATACITE_API_URL = os.environ.get("DATACITE_API_URL")
DATACITE_TEST_MODE = True
DATACITE_MAX_DOI_PER_DAY_PER_USER = int(os.environ.get("DATACITE_MAX_DOI_PER_DAY", 24))
if os.environ.get("DATACITE_TEST_MODE") == "False":
    DATACITE_TEST_MODE = False





if os.environ.get("WORKING_ENV") == "PRODUCTION":
    EMAIL_BACKEND = 'django_ses.SESBackend'
    NOTIFICATION_EMAIL_FROM = os.environ.get("NOTIFICATION_EMAIL_FROM", "")
    AWS_SES_ACCESS_KEY_ID = os.environ.get("AWS_SES_ACCESS_KEY_ID", "")
    AWS_SES_SECRET_ACCESS_KEY = os.environ.get("AWS_SES_SECRET_ACCESS_KEY", "")
    AWS_SES_REGION_NAME = os.environ.get('AWS_SES_REGION_NAME', "us-east-1")

    AWS_SES_REGION_ENDPOINT = os.environ.get('AWS_SES_REGION_ENDPOINT', 'email.us-east-1.amazonaws.com')
    DEBUG = os.environ.get("DEBUG", "False") == "True"
    SECRET_KEY = os.environ.get("SECRET_KEY")
    ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "http://localhost,http://127.0.0.1").split(",")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRES_NAME'),
            'USER': os.environ.get('POSTGRES_USER'),
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
            'HOST': os.environ.get('POSTGRES_HOST', 'db'),
            'PORT': int(os.environ.get('POSTGRES_PORT', '5432')),
        },
    }
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [REDIS_URL],
                "symmetric_encryption_keys": [SECRET_KEY]
            },
        },
    }

    if os.environ.get("POSTGRES_SSL", "0") == "1":
        DATABASES['default']['OPTIONS'] = {'sslmode': 'require'}

    CORS_ORIGIN_WHITELIST = os.environ.get("DJANGO_CORS_WHITELIST").split(",")
    CSRF_TRUSTED_ORIGINS = os.environ.get("DJANGO_CORS_WHITELIST").split(",")
    if os.environ.get("STORAGE_BACKEND") == "gcloud":
        from google.oauth2 import service_account
        STORAGES["default"]["BACKEND"] = 'storages.backends.gcloud.GoogleCloudStorage'
        GS_PROJECT_ID = os.environ.get("GCS_PROJECT_ID")
        GS_BUCKET_NAME = os.environ.get("GCS_BUCKET_NAME")
        GS_CREDENTIALS = service_account.Credentials.from_service_account_file(os.environ.get("GCS_CREDENTIALS_FILE"))
        DBBACKUP_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
        DBBACKUP_STORAGE_OPTIONS = {
            "bucket_name": os.environ.get("GCS_BACKUP_BUCKET_NAME"),
            "project_id": os.environ.get("GCS_BACKUP_PROJECT_ID"),
            "blob_chunk_size": 1024 * 1024
        }
    elif os.environ.get("STORAGE_BACKEND") == "s3":
        STORAGES["default"]["BACKEND"] = 'storages.backends.s3boto3.S3Boto3Storage'
        AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', 'your-spaces-access-key-id')
        AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', 'your-spaces-secret-access-key')
        AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', 'your-spaces-bucket-name')
        AWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL', 'your-spaces-endpoint-url')
        DBBACKUP_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        DBBACKUP_STORAGE_OPTIONS = {
            "access_key": os.environ.get('AWS_BACKUP_ACCESS_KEY_ID', AWS_ACCESS_KEY_ID),
            "bucket_name": os.environ.get('AWS_BACKUP_STORAGE_BUCKET_NAME', AWS_STORAGE_BUCKET_NAME),
            "secret_key": os.environ.get('AWS_BACKUP_SECRET_KEY', AWS_SECRET_ACCESS_KEY),
            "endpoint_url": os.environ.get('AWS_BACKUP_S3_ENDPOINT_URL', AWS_S3_ENDPOINT_URL),
            "default_acl": "private",
        }
    else:
        DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
        DBBACKUP_STORAGE_OPTIONS = {
            "location": os.environ.get("BACKUP_DIR", "/backups")
        }


    DBBACKUP_CONNECTORS = {
        'default': {
            'dump_cmd': 'pg_dump --no-owner --no-acl --no-privileges',
            'restore_cmd': 'pg_restore --no-owner --no-acl --no-privileges --disable-triggers',
            'RESTORE_SUFFIX': '--if-exists'
        }
    }



    if os.environ.get("CURTAIN_ALLOW_NON_STAFF_DELETE"):
        v = int(os.environ.get("CURTAIN_ALLOW_NON_STAFF_DELETE"))
        if v == 1:
            CURTAIN_ALLOW_NON_STAFF_DELETE = True
        else:
            CURTAIN_ALLOW_NON_STAFF_DELETE = False

    if os.environ.get("CURTAIN_ALLOW_NON_USER_POST"):
        v = int(os.environ.get("CURTAIN_ALLOW_NON_USER_POST"))
        if v == 1:
            CURTAIN_ALLOW_NON_USER_POST = True
        else:
            CURTAIN_ALLOW_NON_USER_POST = False
    if os.environ.get("CURTAIN_DEFAULT_USER_LINK_LIMIT"):
        v = int(os.environ.get("CURTAIN_DEFAULT_USER_LINK_LIMIT"))
        if v > 0:
            CURTAIN_DEFAULT_USER_LINK_LIMIT = v
    if os.environ.get("CURTAIN_DEFAULT_USER_CAN_POST"):
        v = int(os.environ.get("CURTAIN_DEFAULT_USER_CAN_POST"))
        if v == 1:
            CURTAIN_DEFAULT_USER_CAN_POST = True
        else:
            CURTAIN_DEFAULT_USER_CAN_POST = False